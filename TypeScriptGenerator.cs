// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace nTsMapper
{
    using System.Globalization;
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using nTsMapper.TypeScript;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class TypeScriptGenerator : TypeScriptGeneratorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// ReSharper disable RedundantQualifier\r\n");
            
            #line 9 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"

// Enums
foreach (var module in mEnumsToGenerate) {

            
            #line default
            #line hidden
            this.Write("module ");
            
            #line 13 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(module.Key));
            
            #line default
            #line hidden
            this.Write(" {\r\n");
            
            #line 14 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"

	foreach (var tsType in module) {

            
            #line default
            #line hidden
            this.Write("\texport enum ");
            
            #line 17 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tsType.TsTypeName));
            
            #line default
            #line hidden
            this.Write(" {\r\n");
            
            #line 18 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"

		foreach (var enumMember in tsType.Members) {

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 21 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumMember.Key));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 21 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumMember.Value));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 22 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
		
	}

            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n");
            
            #line 27 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"

	}

            
            #line default
            #line hidden
            this.Write("}\r\n");
            
            #line 31 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"

}

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 35 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"

foreach (var tsType in mTypesToGenerate) {
	if (mDebugMode) {

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 40 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"

	}

            
            #line default
            #line hidden
            this.Write("module ");
            
            #line 43 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tsType.ModuleName));
            
            #line default
            #line hidden
            this.Write(" {\r\n\texport interface I");
            
            #line 44 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tsType.TsTypeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 44 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tsType.BaseTsType != null ? "extends " + string.Format("{0}.I{1}", ((TsTypeWithProperties)tsType.BaseTsType).ModuleName, tsType.BaseTsType.TsTypeName) : ""));
            
            #line default
            #line hidden
            this.Write("  {\r\n");
            
            #line 45 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"

	foreach (var prop in tsType.Properties) {

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 48 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(prop.Name)));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 48 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.TsType.TsTypeReferenceName));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 49 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
		
	}

            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n");
            
            #line 54 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"

	if (mDebugMode) {

            
            #line default
            #line hidden
            this.Write("\t// InheritanceHierarchyLevel: ");
            
            #line 57 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((mDebugMode) ? ((TsTypeWithProperties)tsType).InheritanceHierarchyLevel.ToString() : ""));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 58 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"

	}

            
            #line default
            #line hidden
            this.Write("\texport class ");
            
            #line 61 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tsType.TsTypeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 61 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tsType.BaseTsType != null ? "extends " + tsType.BaseTsType.TsTypeReferenceName : ""));
            
            #line default
            #line hidden
            this.Write(" implements I");
            
            #line 61 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tsType.TsTypeName));
            
            #line default
            #line hidden
            this.Write(" {\r\n");
            
            #line 62 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"

		foreach (var prop in tsType.Properties) {			

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 65 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(prop.Name)));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 65 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.TsType.TsTypeReferenceName));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 66 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
		
		}

            
            #line default
            #line hidden
            this.Write("\t\tpublic static fromJSON(json: any) : ");
            
            #line 69 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tsType.TsTypeName));
            
            #line default
            #line hidden
            this.Write(" {\r\n\t\t\tif (json === undefined)\r\n\t\t\t\treturn undefined;\r\n\t\t\tif (json === null)\r\n\t\t\t" +
                    "\treturn null;\r\n\r\n");
            
            #line 75 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"

		if (tsType.BaseTsType == null) {

            
            #line default
            #line hidden
            this.Write("\t\t\treturn {\r\n");
            
            #line 79 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"

			for (var i = 0; i < tsType.Properties.Count; i++) { 
				var prop = tsType.Properties[i];

            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 83 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(prop.Name)));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 83 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetJsonAssignment(prop)));
            
            #line default
            #line hidden
            
            #line 83 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"

				if (i < tsType.Properties.Count - 1) { 
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 85 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
				}
			}

            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t};\r\n");
            
            #line 90 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
			
		} else {

            
            #line default
            #line hidden
            this.Write("\t\t\tvar baseObj: ");
            
            #line 93 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tsType.TsTypeName));
            
            #line default
            #line hidden
            this.Write(" = <");
            
            #line 93 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tsType.TsTypeName));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 93 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tsType.BaseTsType.TsTypeReferenceName));
            
            #line default
            #line hidden
            this.Write(".fromJSON(json);\r\n");
            
            #line 94 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"

			foreach (var prop in tsType.Properties) {

            
            #line default
            #line hidden
            this.Write("\t\t\tbaseObj.");
            
            #line 97 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CamelCase(prop.Name)));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 97 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetJsonAssignment(prop)));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 98 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"

			}

            
            #line default
            #line hidden
            this.Write("\t\t\treturn baseObj;\r\n");
            
            #line 102 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"

		}

            
            #line default
            #line hidden
            this.Write("\t\t}\r\n\t}\r\n}\r\n");
            
            #line 108 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"

	}

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 112 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"



            
            #line default
            #line hidden
            this.Write("// ReSharper restore RedundantQualifier\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 116 "C:\Development\ProCoder10\nTsMapper\TypeScriptGenerator.tt"


// camel case converter code borrowed from JSON.NET
string CamelCase(string identifier) {
	if (string.IsNullOrEmpty(identifier))
		return identifier;

	if (!char.IsUpper(identifier[0]))
		return identifier;

	StringBuilder sb = new StringBuilder();
	for (int i = 0; i < identifier.Length; i++)
	{
		bool hasNext = (i + 1 < identifier.Length);
		if ((i == 0 || !hasNext) || char.IsUpper(identifier[i + 1]))
		{
			char lowerCase;

			lowerCase = char.ToLower(identifier[i], CultureInfo.InvariantCulture);

			sb.Append(lowerCase);
		}
		else
		{
			sb.Append(identifier.Substring(i));
			break;
		}
	}

	return sb.ToString();

}

string GetJsonAssignment(TsProperty prop) {
	return GetAssignmentExpression(prop.TsType, "json." + CamelCase(prop.Name));
}

string GetAssignmentExpression(TsType type, string sourceExpression) {
	if(type is TsMappedType) return string.Format(((TsMappedType)type).AssignmentTemplate, sourceExpression);
	if(type is TsTypeWithProperties) return type.TsTypeReferenceName + ".fromJSON(" + sourceExpression + ")";
	if(type is TsCollection) return sourceExpression + " === null ? null : " + sourceExpression + ".map(o => " + GetAssignmentExpression(((TsCollection)type).TsItemType, "o") + ")";
	return sourceExpression;
}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class TypeScriptGeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
